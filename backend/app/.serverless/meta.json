{
  "C:\\Users\\FazalFathima\\Desktop\\mvo-Copy\\mv-be-cc\\app": {
    "versionSfCore": null,
    "versionFramework": "4.2.4",
    "isWithinCompose": false,
    "isCompose": false,
    "composeOrgName": null,
    "composeResolverProviders": {
      "default-aws-credential-resolver": "<REDACTED>"
    },
    "composeServiceName": null,
    "servicePath": "C:\\Users\\FazalFathima\\Desktop\\mvo-Copy\\mv-be-cc\\app",
    "serviceConfigFileName": "serverless.yml",
    "service": {
      "org": "montycloud",
      "app": "montovoicee",
      "service": "montyyvoicee",
      "provider": {
        "name": "aws",
        "runtime": "python3.12",
        "timeout": 30,
        "memorySize": 128,
        "iamRoleStatements": [
          {
            "Effect": "Allow",
            "Action": [
              "s3:PutObject",
              "s3:GetObject",
              "s3:HeadObject",
              "s3:DeleteObject"
            ],
            "Resource": [
              "arn:aws:s3:::montyvoice-backimages",
              "arn:aws:s3:::montyvoice-backimages/*"
            ]
          },
          {
            "Effect": "Allow",
            "Action": [
              "logs:CreateLogGroup",
              "logs:CreateLogStream",
              "logs:PutLogEvents"
            ],
            "Resource": "arn:aws:logs:*:*:*"
          },
          {
            "Effect": "Allow",
            "Action": [
              "sns:Publish"
            ],
            "Resource": "arn:aws:sns:*:*:*"
          }
        ],
        "stage": "dev",
        "region": "us-east-1",
        "versionFunctions": true,
        "compiledCloudFormationTemplate": {
          "AWSTemplateFormatVersion": "2010-09-09",
          "Description": "The AWS CloudFormation template for this Serverless application",
          "Resources": {
            "ServerlessDeploymentBucket": {
              "Type": "AWS::S3::Bucket",
              "Properties": {
                "BucketEncryption": {
                  "ServerSideEncryptionConfiguration": [
                    {
                      "ServerSideEncryptionByDefault": {
                        "SSEAlgorithm": "AES256"
                      }
                    }
                  ]
                }
              }
            },
            "ServerlessDeploymentBucketPolicy": {
              "Type": "AWS::S3::BucketPolicy",
              "Properties": {
                "Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "PolicyDocument": {
                  "Statement": [
                    {
                      "Action": "s3:*",
                      "Effect": "Deny",
                      "Principal": "*",
                      "Resource": [
                        {
                          "Fn::Join": [
                            "",
                            [
                              "arn:",
                              {
                                "Ref": "AWS::Partition"
                              },
                              ":s3:::",
                              {
                                "Ref": "ServerlessDeploymentBucket"
                              },
                              "/*"
                            ]
                          ]
                        },
                        {
                          "Fn::Join": [
                            "",
                            [
                              "arn:",
                              {
                                "Ref": "AWS::Partition"
                              },
                              ":s3:::",
                              {
                                "Ref": "ServerlessDeploymentBucket"
                              }
                            ]
                          ]
                        }
                      ],
                      "Condition": {
                        "Bool": {
                          "aws:SecureTransport": false
                        }
                      }
                    }
                  ]
                }
              }
            },
            "AuthServiceLogGroup": {
              "Type": "AWS::Logs::LogGroup",
              "Properties": {
                "LogGroupName": "/aws/lambda/montyyvoicee-dev-AuthService"
              }
            },
            "UserServiceLogGroup": {
              "Type": "AWS::Logs::LogGroup",
              "Properties": {
                "LogGroupName": "/aws/lambda/montyyvoicee-dev-UserService"
              }
            },
            "PostsServiceLogGroup": {
              "Type": "AWS::Logs::LogGroup",
              "Properties": {
                "LogGroupName": "/aws/lambda/montyyvoicee-dev-PostsService"
              }
            },
            "RepliesServiceLogGroup": {
              "Type": "AWS::Logs::LogGroup",
              "Properties": {
                "LogGroupName": "/aws/lambda/montyyvoicee-dev-RepliesService"
              }
            },
            "LikesServiceLogGroup": {
              "Type": "AWS::Logs::LogGroup",
              "Properties": {
                "LogGroupName": "/aws/lambda/montyyvoicee-dev-LikesService"
              }
            },
            "IamRoleLambdaExecution": {
              "Type": "AWS::IAM::Role",
              "Properties": {
                "AssumeRolePolicyDocument": {
                  "Version": "2012-10-17",
                  "Statement": [
                    {
                      "Effect": "Allow",
                      "Principal": {
                        "Service": [
                          "lambda.amazonaws.com"
                        ]
                      },
                      "Action": [
                        "sts:AssumeRole"
                      ]
                    }
                  ]
                },
                "Policies": [
                  {
                    "PolicyName": {
                      "Fn::Join": [
                        "-",
                        [
                          "montyyvoicee",
                          "dev",
                          "lambda"
                        ]
                      ]
                    },
                    "PolicyDocument": {
                      "Version": "2012-10-17",
                      "Statement": [
                        {
                          "Effect": "Allow",
                          "Action": [
                            "logs:CreateLogStream",
                            "logs:CreateLogGroup",
                            "logs:TagResource"
                          ],
                          "Resource": [
                            {
                              "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/montyyvoicee-dev*:*"
                            }
                          ]
                        },
                        {
                          "Effect": "Allow",
                          "Action": [
                            "logs:PutLogEvents"
                          ],
                          "Resource": [
                            {
                              "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/montyyvoicee-dev*:*:*"
                            }
                          ]
                        },
                        {
                          "Effect": "Allow",
                          "Action": [
                            "s3:PutObject",
                            "s3:GetObject",
                            "s3:HeadObject",
                            "s3:DeleteObject"
                          ],
                          "Resource": [
                            "arn:aws:s3:::montyvoice-backimages",
                            "arn:aws:s3:::montyvoice-backimages/*"
                          ]
                        },
                        {
                          "Effect": "Allow",
                          "Action": [
                            "logs:CreateLogGroup",
                            "logs:CreateLogStream",
                            "logs:PutLogEvents"
                          ],
                          "Resource": "arn:aws:logs:*:*:*"
                        },
                        {
                          "Effect": "Allow",
                          "Action": [
                            "sns:Publish"
                          ],
                          "Resource": "arn:aws:sns:*:*:*"
                        }
                      ]
                    }
                  }
                ],
                "Path": "/",
                "RoleName": {
                  "Fn::Join": [
                    "-",
                    [
                      "montyyvoicee",
                      "dev",
                      {
                        "Ref": "AWS::Region"
                      },
                      "lambdaRole"
                    ]
                  ]
                }
              }
            },
            "AuthServiceLambdaFunction": {
              "Type": "AWS::Lambda::Function",
              "Properties": {
                "Code": {
                  "S3Bucket": {
                    "Ref": "ServerlessDeploymentBucket"
                  },
                  "S3Key": "serverless/montyyvoicee/dev/1725209999006-2024-09-01T16:59:59.006Z/montyyvoicee.zip"
                },
                "Handler": "Auth/main.handler",
                "Runtime": "python3.12",
                "FunctionName": "montyyvoicee-dev-AuthService",
                "MemorySize": 512,
                "Timeout": 60,
                "Role": {
                  "Fn::GetAtt": [
                    "IamRoleLambdaExecution",
                    "Arn"
                  ]
                }
              },
              "DependsOn": [
                "AuthServiceLogGroup"
              ]
            },
            "UserServiceLambdaFunction": {
              "Type": "AWS::Lambda::Function",
              "Properties": {
                "Code": {
                  "S3Bucket": {
                    "Ref": "ServerlessDeploymentBucket"
                  },
                  "S3Key": "serverless/montyyvoicee/dev/1725209999006-2024-09-01T16:59:59.006Z/montyyvoicee.zip"
                },
                "Handler": "User/main.handler",
                "Runtime": "python3.12",
                "FunctionName": "montyyvoicee-dev-UserService",
                "MemorySize": 512,
                "Timeout": 60,
                "Role": {
                  "Fn::GetAtt": [
                    "IamRoleLambdaExecution",
                    "Arn"
                  ]
                }
              },
              "DependsOn": [
                "UserServiceLogGroup"
              ]
            },
            "PostsServiceLambdaFunction": {
              "Type": "AWS::Lambda::Function",
              "Properties": {
                "Code": {
                  "S3Bucket": {
                    "Ref": "ServerlessDeploymentBucket"
                  },
                  "S3Key": "serverless/montyyvoicee/dev/1725209999006-2024-09-01T16:59:59.006Z/montyyvoicee.zip"
                },
                "Handler": "Posts/main.handler",
                "Runtime": "python3.12",
                "FunctionName": "montyyvoicee-dev-PostsService",
                "MemorySize": 512,
                "Timeout": 60,
                "Role": {
                  "Fn::GetAtt": [
                    "IamRoleLambdaExecution",
                    "Arn"
                  ]
                }
              },
              "DependsOn": [
                "PostsServiceLogGroup"
              ]
            },
            "RepliesServiceLambdaFunction": {
              "Type": "AWS::Lambda::Function",
              "Properties": {
                "Code": {
                  "S3Bucket": {
                    "Ref": "ServerlessDeploymentBucket"
                  },
                  "S3Key": "serverless/montyyvoicee/dev/1725209999006-2024-09-01T16:59:59.006Z/montyyvoicee.zip"
                },
                "Handler": "Replies/main.handler",
                "Runtime": "python3.12",
                "FunctionName": "montyyvoicee-dev-RepliesService",
                "MemorySize": 512,
                "Timeout": 60,
                "Role": {
                  "Fn::GetAtt": [
                    "IamRoleLambdaExecution",
                    "Arn"
                  ]
                }
              },
              "DependsOn": [
                "RepliesServiceLogGroup"
              ]
            },
            "LikesServiceLambdaFunction": {
              "Type": "AWS::Lambda::Function",
              "Properties": {
                "Code": {
                  "S3Bucket": {
                    "Ref": "ServerlessDeploymentBucket"
                  },
                  "S3Key": "serverless/montyyvoicee/dev/1725209999006-2024-09-01T16:59:59.006Z/montyyvoicee.zip"
                },
                "Handler": "Like/main.handler",
                "Runtime": "python3.12",
                "FunctionName": "montyyvoicee-dev-LikesService",
                "MemorySize": 512,
                "Timeout": 60,
                "Role": {
                  "Fn::GetAtt": [
                    "IamRoleLambdaExecution",
                    "Arn"
                  ]
                }
              },
              "DependsOn": [
                "LikesServiceLogGroup"
              ]
            },
            "AuthServiceLambdaVersionPyWSxqwULf5QDBONx9wa5ZDTThhEgU56MqaynHDwc": {
              "Type": "AWS::Lambda::Version",
              "DeletionPolicy": "Retain",
              "Properties": {
                "FunctionName": {
                  "Ref": "AuthServiceLambdaFunction"
                },
                "CodeSha256": "0cNxPrBGLNL73SET4pJKz+xzBveCPeaDPR5oDtKKQPo="
              }
            },
            "UserServiceLambdaVersionQB9drLwVGhEKKIcXrDk1VBtdNLpDal6EydVXfrtcttg": {
              "Type": "AWS::Lambda::Version",
              "DeletionPolicy": "Retain",
              "Properties": {
                "FunctionName": {
                  "Ref": "UserServiceLambdaFunction"
                },
                "CodeSha256": "0cNxPrBGLNL73SET4pJKz+xzBveCPeaDPR5oDtKKQPo="
              }
            },
            "PostsServiceLambdaVersionVihIWL3g2gy4B68iPaiYsEdXeyk0EljJOPBwtQk": {
              "Type": "AWS::Lambda::Version",
              "DeletionPolicy": "Retain",
              "Properties": {
                "FunctionName": {
                  "Ref": "PostsServiceLambdaFunction"
                },
                "CodeSha256": "0cNxPrBGLNL73SET4pJKz+xzBveCPeaDPR5oDtKKQPo="
              }
            },
            "RepliesServiceLambdaVersionYk4elqV4OFKmVqYiEuo9pvGXZ7Cyh4wlszThnMPU": {
              "Type": "AWS::Lambda::Version",
              "DeletionPolicy": "Retain",
              "Properties": {
                "FunctionName": {
                  "Ref": "RepliesServiceLambdaFunction"
                },
                "CodeSha256": "0cNxPrBGLNL73SET4pJKz+xzBveCPeaDPR5oDtKKQPo="
              }
            },
            "LikesServiceLambdaVersionENfkC3rJBzp5OS0iufb8kRcSWrIASBjVjKR03SWjDU": {
              "Type": "AWS::Lambda::Version",
              "DeletionPolicy": "Retain",
              "Properties": {
                "FunctionName": {
                  "Ref": "LikesServiceLambdaFunction"
                },
                "CodeSha256": "0cNxPrBGLNL73SET4pJKz+xzBveCPeaDPR5oDtKKQPo="
              }
            },
            "ApiGatewayRestApi": {
              "Type": "AWS::ApiGateway::RestApi",
              "Properties": {
                "Name": "dev-montyyvoicee",
                "EndpointConfiguration": {
                  "Types": [
                    "EDGE"
                  ]
                },
                "Policy": ""
              }
            },
            "ApiGatewayResourceLogin": {
              "Type": "AWS::ApiGateway::Resource",
              "Properties": {
                "ParentId": {
                  "Fn::GetAtt": [
                    "ApiGatewayRestApi",
                    "RootResourceId"
                  ]
                },
                "PathPart": "login",
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                }
              }
            },
            "ApiGatewayResourceSignup": {
              "Type": "AWS::ApiGateway::Resource",
              "Properties": {
                "ParentId": {
                  "Fn::GetAtt": [
                    "ApiGatewayRestApi",
                    "RootResourceId"
                  ]
                },
                "PathPart": "signup",
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                }
              }
            },
            "ApiGatewayResourceUsers": {
              "Type": "AWS::ApiGateway::Resource",
              "Properties": {
                "ParentId": {
                  "Fn::GetAtt": [
                    "ApiGatewayRestApi",
                    "RootResourceId"
                  ]
                },
                "PathPart": "users",
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                }
              }
            },
            "ApiGatewayResourceUsersGetuserbyid": {
              "Type": "AWS::ApiGateway::Resource",
              "Properties": {
                "ParentId": {
                  "Ref": "ApiGatewayResourceUsers"
                },
                "PathPart": "getuserbyid",
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                }
              }
            },
            "ApiGatewayResourceUsersGetuserbyidUseridVar": {
              "Type": "AWS::ApiGateway::Resource",
              "Properties": {
                "ParentId": {
                  "Ref": "ApiGatewayResourceUsersGetuserbyid"
                },
                "PathPart": "{user_id}",
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                }
              }
            },
            "ApiGatewayResourceUsersUpdateuser": {
              "Type": "AWS::ApiGateway::Resource",
              "Properties": {
                "ParentId": {
                  "Ref": "ApiGatewayResourceUsers"
                },
                "PathPart": "updateuser",
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                }
              }
            },
            "ApiGatewayResourceUsersUpdateuserUseridVar": {
              "Type": "AWS::ApiGateway::Resource",
              "Properties": {
                "ParentId": {
                  "Ref": "ApiGatewayResourceUsersUpdateuser"
                },
                "PathPart": "{user_id}",
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                }
              }
            },
            "ApiGatewayResourceUsersGetall": {
              "Type": "AWS::ApiGateway::Resource",
              "Properties": {
                "ParentId": {
                  "Ref": "ApiGatewayResourceUsers"
                },
                "PathPart": "getall",
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                }
              }
            },
            "ApiGatewayResourceUsersGetallUsernames": {
              "Type": "AWS::ApiGateway::Resource",
              "Properties": {
                "ParentId": {
                  "Ref": "ApiGatewayResourceUsersGetall"
                },
                "PathPart": "usernames",
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                }
              }
            },
            "ApiGatewayResourceUsersUseridVar": {
              "Type": "AWS::ApiGateway::Resource",
              "Properties": {
                "ParentId": {
                  "Ref": "ApiGatewayResourceUsers"
                },
                "PathPart": "{user_id}",
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                }
              }
            },
            "ApiGatewayResourceUsersUseridVarRecentDashactivity": {
              "Type": "AWS::ApiGateway::Resource",
              "Properties": {
                "ParentId": {
                  "Ref": "ApiGatewayResourceUsersUseridVar"
                },
                "PathPart": "recent-activity",
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                }
              }
            },
            "ApiGatewayResourcePosts": {
              "Type": "AWS::ApiGateway::Resource",
              "Properties": {
                "ParentId": {
                  "Fn::GetAtt": [
                    "ApiGatewayRestApi",
                    "RootResourceId"
                  ]
                },
                "PathPart": "posts",
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                }
              }
            },
            "ApiGatewayResourcePostsCreate": {
              "Type": "AWS::ApiGateway::Resource",
              "Properties": {
                "ParentId": {
                  "Ref": "ApiGatewayResourcePosts"
                },
                "PathPart": "create",
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                }
              }
            },
            "ApiGatewayResourcePostsUpdate": {
              "Type": "AWS::ApiGateway::Resource",
              "Properties": {
                "ParentId": {
                  "Ref": "ApiGatewayResourcePosts"
                },
                "PathPart": "update",
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                }
              }
            },
            "ApiGatewayResourcePostsUpdatePostidVar": {
              "Type": "AWS::ApiGateway::Resource",
              "Properties": {
                "ParentId": {
                  "Ref": "ApiGatewayResourcePostsUpdate"
                },
                "PathPart": "{post_id}",
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                }
              }
            },
            "ApiGatewayResourcePostsDelete": {
              "Type": "AWS::ApiGateway::Resource",
              "Properties": {
                "ParentId": {
                  "Ref": "ApiGatewayResourcePosts"
                },
                "PathPart": "delete",
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                }
              }
            },
            "ApiGatewayResourcePostsDeletePostidVar": {
              "Type": "AWS::ApiGateway::Resource",
              "Properties": {
                "ParentId": {
                  "Ref": "ApiGatewayResourcePostsDelete"
                },
                "PathPart": "{post_id}",
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                }
              }
            },
            "ApiGatewayResourcePostsCheers": {
              "Type": "AWS::ApiGateway::Resource",
              "Properties": {
                "ParentId": {
                  "Ref": "ApiGatewayResourcePosts"
                },
                "PathPart": "cheers",
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                }
              }
            },
            "ApiGatewayResourcePostsCheersUseridVar": {
              "Type": "AWS::ApiGateway::Resource",
              "Properties": {
                "ParentId": {
                  "Ref": "ApiGatewayResourcePostsCheers"
                },
                "PathPart": "{user_id}",
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                }
              }
            },
            "ApiGatewayResourcePostsFeedback": {
              "Type": "AWS::ApiGateway::Resource",
              "Properties": {
                "ParentId": {
                  "Ref": "ApiGatewayResourcePosts"
                },
                "PathPart": "feedback",
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                }
              }
            },
            "ApiGatewayResourcePostsFeedbackUseridVar": {
              "Type": "AWS::ApiGateway::Resource",
              "Properties": {
                "ParentId": {
                  "Ref": "ApiGatewayResourcePostsFeedback"
                },
                "PathPart": "{user_id}",
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                }
              }
            },
            "ApiGatewayResourcePostsSuggestion": {
              "Type": "AWS::ApiGateway::Resource",
              "Properties": {
                "ParentId": {
                  "Ref": "ApiGatewayResourcePosts"
                },
                "PathPart": "suggestion",
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                }
              }
            },
            "ApiGatewayResourcePostsSuggestionUseridVar": {
              "Type": "AWS::ApiGateway::Resource",
              "Properties": {
                "ParentId": {
                  "Ref": "ApiGatewayResourcePostsSuggestion"
                },
                "PathPart": "{user_id}",
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                }
              }
            },
            "ApiGatewayResourceReplies": {
              "Type": "AWS::ApiGateway::Resource",
              "Properties": {
                "ParentId": {
                  "Fn::GetAtt": [
                    "ApiGatewayRestApi",
                    "RootResourceId"
                  ]
                },
                "PathPart": "replies",
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                }
              }
            },
            "ApiGatewayResourceRepliesCreate": {
              "Type": "AWS::ApiGateway::Resource",
              "Properties": {
                "ParentId": {
                  "Ref": "ApiGatewayResourceReplies"
                },
                "PathPart": "create",
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                }
              }
            },
            "ApiGatewayResourceRepliesGetreply": {
              "Type": "AWS::ApiGateway::Resource",
              "Properties": {
                "ParentId": {
                  "Ref": "ApiGatewayResourceReplies"
                },
                "PathPart": "getreply",
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                }
              }
            },
            "ApiGatewayResourceRepliesGetreplyPostidVar": {
              "Type": "AWS::ApiGateway::Resource",
              "Properties": {
                "ParentId": {
                  "Ref": "ApiGatewayResourceRepliesGetreply"
                },
                "PathPart": "{post_id}",
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                }
              }
            },
            "ApiGatewayResourceRepliesDelrep": {
              "Type": "AWS::ApiGateway::Resource",
              "Properties": {
                "ParentId": {
                  "Ref": "ApiGatewayResourceReplies"
                },
                "PathPart": "delrep",
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                }
              }
            },
            "ApiGatewayResourceRepliesDelrepReplyidVar": {
              "Type": "AWS::ApiGateway::Resource",
              "Properties": {
                "ParentId": {
                  "Ref": "ApiGatewayResourceRepliesDelrep"
                },
                "PathPart": "{reply_id}",
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                }
              }
            },
            "ApiGatewayResourceLike": {
              "Type": "AWS::ApiGateway::Resource",
              "Properties": {
                "ParentId": {
                  "Fn::GetAtt": [
                    "ApiGatewayRestApi",
                    "RootResourceId"
                  ]
                },
                "PathPart": "like",
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                }
              }
            },
            "ApiGatewayResourceLikePostidVar": {
              "Type": "AWS::ApiGateway::Resource",
              "Properties": {
                "ParentId": {
                  "Ref": "ApiGatewayResourceLike"
                },
                "PathPart": "{post_id}",
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                }
              }
            },
            "ApiGatewayResourceUnlike": {
              "Type": "AWS::ApiGateway::Resource",
              "Properties": {
                "ParentId": {
                  "Fn::GetAtt": [
                    "ApiGatewayRestApi",
                    "RootResourceId"
                  ]
                },
                "PathPart": "unlike",
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                }
              }
            },
            "ApiGatewayResourceUnlikePostidVar": {
              "Type": "AWS::ApiGateway::Resource",
              "Properties": {
                "ParentId": {
                  "Ref": "ApiGatewayResourceUnlike"
                },
                "PathPart": "{post_id}",
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                }
              }
            },
            "ApiGatewayResourceLikestate": {
              "Type": "AWS::ApiGateway::Resource",
              "Properties": {
                "ParentId": {
                  "Fn::GetAtt": [
                    "ApiGatewayRestApi",
                    "RootResourceId"
                  ]
                },
                "PathPart": "like_state",
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                }
              }
            },
            "ApiGatewayResourceLikestatePostidVar": {
              "Type": "AWS::ApiGateway::Resource",
              "Properties": {
                "ParentId": {
                  "Ref": "ApiGatewayResourceLikestate"
                },
                "PathPart": "{post_id}",
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                }
              }
            },
            "ApiGatewayResourceLikestatePostidVarUseridVar": {
              "Type": "AWS::ApiGateway::Resource",
              "Properties": {
                "ParentId": {
                  "Ref": "ApiGatewayResourceLikestatePostidVar"
                },
                "PathPart": "{user_id}",
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                }
              }
            },
            "ApiGatewayMethodLoginOptions": {
              "Type": "AWS::ApiGateway::Method",
              "Properties": {
                "AuthorizationType": "NONE",
                "HttpMethod": "OPTIONS",
                "MethodResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": true,
                      "method.response.header.Access-Control-Allow-Headers": true,
                      "method.response.header.Access-Control-Allow-Methods": true
                    },
                    "ResponseModels": {}
                  }
                ],
                "RequestParameters": {},
                "Integration": {
                  "Type": "MOCK",
                  "RequestTemplates": {
                    "application/json": "{statusCode:200}"
                  },
                  "ContentHandling": "CONVERT_TO_TEXT",
                  "IntegrationResponses": [
                    {
                      "StatusCode": "200",
                      "ResponseParameters": {
                        "method.response.header.Access-Control-Allow-Origin": "'*'",
                        "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                        "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,POST'"
                      },
                      "ResponseTemplates": {
                        "application/json": ""
                      }
                    }
                  ]
                },
                "ResourceId": {
                  "Ref": "ApiGatewayResourceLogin"
                },
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                }
              }
            },
            "ApiGatewayMethodSignupOptions": {
              "Type": "AWS::ApiGateway::Method",
              "Properties": {
                "AuthorizationType": "NONE",
                "HttpMethod": "OPTIONS",
                "MethodResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": true,
                      "method.response.header.Access-Control-Allow-Headers": true,
                      "method.response.header.Access-Control-Allow-Methods": true
                    },
                    "ResponseModels": {}
                  }
                ],
                "RequestParameters": {},
                "Integration": {
                  "Type": "MOCK",
                  "RequestTemplates": {
                    "application/json": "{statusCode:200}"
                  },
                  "ContentHandling": "CONVERT_TO_TEXT",
                  "IntegrationResponses": [
                    {
                      "StatusCode": "200",
                      "ResponseParameters": {
                        "method.response.header.Access-Control-Allow-Origin": "'*'",
                        "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                        "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,POST'"
                      },
                      "ResponseTemplates": {
                        "application/json": ""
                      }
                    }
                  ]
                },
                "ResourceId": {
                  "Ref": "ApiGatewayResourceSignup"
                },
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                }
              }
            },
            "ApiGatewayMethodUsersGetuserbyidUseridVarOptions": {
              "Type": "AWS::ApiGateway::Method",
              "Properties": {
                "AuthorizationType": "NONE",
                "HttpMethod": "OPTIONS",
                "MethodResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": true,
                      "method.response.header.Access-Control-Allow-Headers": true,
                      "method.response.header.Access-Control-Allow-Methods": true
                    },
                    "ResponseModels": {}
                  }
                ],
                "RequestParameters": {},
                "Integration": {
                  "Type": "MOCK",
                  "RequestTemplates": {
                    "application/json": "{statusCode:200}"
                  },
                  "ContentHandling": "CONVERT_TO_TEXT",
                  "IntegrationResponses": [
                    {
                      "StatusCode": "200",
                      "ResponseParameters": {
                        "method.response.header.Access-Control-Allow-Origin": "'*'",
                        "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                        "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,GET'"
                      },
                      "ResponseTemplates": {
                        "application/json": ""
                      }
                    }
                  ]
                },
                "ResourceId": {
                  "Ref": "ApiGatewayResourceUsersGetuserbyidUseridVar"
                },
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                }
              }
            },
            "ApiGatewayMethodUsersUpdateuserUseridVarOptions": {
              "Type": "AWS::ApiGateway::Method",
              "Properties": {
                "AuthorizationType": "NONE",
                "HttpMethod": "OPTIONS",
                "MethodResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": true,
                      "method.response.header.Access-Control-Allow-Headers": true,
                      "method.response.header.Access-Control-Allow-Methods": true
                    },
                    "ResponseModels": {}
                  }
                ],
                "RequestParameters": {},
                "Integration": {
                  "Type": "MOCK",
                  "RequestTemplates": {
                    "application/json": "{statusCode:200}"
                  },
                  "ContentHandling": "CONVERT_TO_TEXT",
                  "IntegrationResponses": [
                    {
                      "StatusCode": "200",
                      "ResponseParameters": {
                        "method.response.header.Access-Control-Allow-Origin": "'*'",
                        "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                        "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,PUT'"
                      },
                      "ResponseTemplates": {
                        "application/json": ""
                      }
                    }
                  ]
                },
                "ResourceId": {
                  "Ref": "ApiGatewayResourceUsersUpdateuserUseridVar"
                },
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                }
              }
            },
            "ApiGatewayMethodUsersGetallUsernamesOptions": {
              "Type": "AWS::ApiGateway::Method",
              "Properties": {
                "AuthorizationType": "NONE",
                "HttpMethod": "OPTIONS",
                "MethodResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": true,
                      "method.response.header.Access-Control-Allow-Headers": true,
                      "method.response.header.Access-Control-Allow-Methods": true
                    },
                    "ResponseModels": {}
                  }
                ],
                "RequestParameters": {},
                "Integration": {
                  "Type": "MOCK",
                  "RequestTemplates": {
                    "application/json": "{statusCode:200}"
                  },
                  "ContentHandling": "CONVERT_TO_TEXT",
                  "IntegrationResponses": [
                    {
                      "StatusCode": "200",
                      "ResponseParameters": {
                        "method.response.header.Access-Control-Allow-Origin": "'*'",
                        "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                        "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,GET'"
                      },
                      "ResponseTemplates": {
                        "application/json": ""
                      }
                    }
                  ]
                },
                "ResourceId": {
                  "Ref": "ApiGatewayResourceUsersGetallUsernames"
                },
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                }
              }
            },
            "ApiGatewayMethodUsersUseridVarRecentDashactivityOptions": {
              "Type": "AWS::ApiGateway::Method",
              "Properties": {
                "AuthorizationType": "NONE",
                "HttpMethod": "OPTIONS",
                "MethodResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": true,
                      "method.response.header.Access-Control-Allow-Headers": true,
                      "method.response.header.Access-Control-Allow-Methods": true
                    },
                    "ResponseModels": {}
                  }
                ],
                "RequestParameters": {},
                "Integration": {
                  "Type": "MOCK",
                  "RequestTemplates": {
                    "application/json": "{statusCode:200}"
                  },
                  "ContentHandling": "CONVERT_TO_TEXT",
                  "IntegrationResponses": [
                    {
                      "StatusCode": "200",
                      "ResponseParameters": {
                        "method.response.header.Access-Control-Allow-Origin": "'*'",
                        "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                        "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,GET'"
                      },
                      "ResponseTemplates": {
                        "application/json": ""
                      }
                    }
                  ]
                },
                "ResourceId": {
                  "Ref": "ApiGatewayResourceUsersUseridVarRecentDashactivity"
                },
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                }
              }
            },
            "ApiGatewayMethodPostsCreateOptions": {
              "Type": "AWS::ApiGateway::Method",
              "Properties": {
                "AuthorizationType": "NONE",
                "HttpMethod": "OPTIONS",
                "MethodResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": true,
                      "method.response.header.Access-Control-Allow-Headers": true,
                      "method.response.header.Access-Control-Allow-Methods": true
                    },
                    "ResponseModels": {}
                  }
                ],
                "RequestParameters": {},
                "Integration": {
                  "Type": "MOCK",
                  "RequestTemplates": {
                    "application/json": "{statusCode:200}"
                  },
                  "ContentHandling": "CONVERT_TO_TEXT",
                  "IntegrationResponses": [
                    {
                      "StatusCode": "200",
                      "ResponseParameters": {
                        "method.response.header.Access-Control-Allow-Origin": "'*'",
                        "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                        "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,POST'"
                      },
                      "ResponseTemplates": {
                        "application/json": ""
                      }
                    }
                  ]
                },
                "ResourceId": {
                  "Ref": "ApiGatewayResourcePostsCreate"
                },
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                }
              }
            },
            "ApiGatewayMethodPostsUpdatePostidVarOptions": {
              "Type": "AWS::ApiGateway::Method",
              "Properties": {
                "AuthorizationType": "NONE",
                "HttpMethod": "OPTIONS",
                "MethodResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": true,
                      "method.response.header.Access-Control-Allow-Headers": true,
                      "method.response.header.Access-Control-Allow-Methods": true
                    },
                    "ResponseModels": {}
                  }
                ],
                "RequestParameters": {},
                "Integration": {
                  "Type": "MOCK",
                  "RequestTemplates": {
                    "application/json": "{statusCode:200}"
                  },
                  "ContentHandling": "CONVERT_TO_TEXT",
                  "IntegrationResponses": [
                    {
                      "StatusCode": "200",
                      "ResponseParameters": {
                        "method.response.header.Access-Control-Allow-Origin": "'*'",
                        "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                        "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,PUT'"
                      },
                      "ResponseTemplates": {
                        "application/json": ""
                      }
                    }
                  ]
                },
                "ResourceId": {
                  "Ref": "ApiGatewayResourcePostsUpdatePostidVar"
                },
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                }
              }
            },
            "ApiGatewayMethodPostsDeletePostidVarOptions": {
              "Type": "AWS::ApiGateway::Method",
              "Properties": {
                "AuthorizationType": "NONE",
                "HttpMethod": "OPTIONS",
                "MethodResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": true,
                      "method.response.header.Access-Control-Allow-Headers": true,
                      "method.response.header.Access-Control-Allow-Methods": true
                    },
                    "ResponseModels": {}
                  }
                ],
                "RequestParameters": {},
                "Integration": {
                  "Type": "MOCK",
                  "RequestTemplates": {
                    "application/json": "{statusCode:200}"
                  },
                  "ContentHandling": "CONVERT_TO_TEXT",
                  "IntegrationResponses": [
                    {
                      "StatusCode": "200",
                      "ResponseParameters": {
                        "method.response.header.Access-Control-Allow-Origin": "'*'",
                        "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                        "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,DELETE'"
                      },
                      "ResponseTemplates": {
                        "application/json": ""
                      }
                    }
                  ]
                },
                "ResourceId": {
                  "Ref": "ApiGatewayResourcePostsDeletePostidVar"
                },
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                }
              }
            },
            "ApiGatewayMethodPostsCheersUseridVarOptions": {
              "Type": "AWS::ApiGateway::Method",
              "Properties": {
                "AuthorizationType": "NONE",
                "HttpMethod": "OPTIONS",
                "MethodResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": true,
                      "method.response.header.Access-Control-Allow-Headers": true,
                      "method.response.header.Access-Control-Allow-Methods": true
                    },
                    "ResponseModels": {}
                  }
                ],
                "RequestParameters": {},
                "Integration": {
                  "Type": "MOCK",
                  "RequestTemplates": {
                    "application/json": "{statusCode:200}"
                  },
                  "ContentHandling": "CONVERT_TO_TEXT",
                  "IntegrationResponses": [
                    {
                      "StatusCode": "200",
                      "ResponseParameters": {
                        "method.response.header.Access-Control-Allow-Origin": "'*'",
                        "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                        "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,GET'"
                      },
                      "ResponseTemplates": {
                        "application/json": ""
                      }
                    }
                  ]
                },
                "ResourceId": {
                  "Ref": "ApiGatewayResourcePostsCheersUseridVar"
                },
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                }
              }
            },
            "ApiGatewayMethodPostsFeedbackUseridVarOptions": {
              "Type": "AWS::ApiGateway::Method",
              "Properties": {
                "AuthorizationType": "NONE",
                "HttpMethod": "OPTIONS",
                "MethodResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": true,
                      "method.response.header.Access-Control-Allow-Headers": true,
                      "method.response.header.Access-Control-Allow-Methods": true
                    },
                    "ResponseModels": {}
                  }
                ],
                "RequestParameters": {},
                "Integration": {
                  "Type": "MOCK",
                  "RequestTemplates": {
                    "application/json": "{statusCode:200}"
                  },
                  "ContentHandling": "CONVERT_TO_TEXT",
                  "IntegrationResponses": [
                    {
                      "StatusCode": "200",
                      "ResponseParameters": {
                        "method.response.header.Access-Control-Allow-Origin": "'*'",
                        "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                        "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,GET'"
                      },
                      "ResponseTemplates": {
                        "application/json": ""
                      }
                    }
                  ]
                },
                "ResourceId": {
                  "Ref": "ApiGatewayResourcePostsFeedbackUseridVar"
                },
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                }
              }
            },
            "ApiGatewayMethodPostsSuggestionUseridVarOptions": {
              "Type": "AWS::ApiGateway::Method",
              "Properties": {
                "AuthorizationType": "NONE",
                "HttpMethod": "OPTIONS",
                "MethodResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": true,
                      "method.response.header.Access-Control-Allow-Headers": true,
                      "method.response.header.Access-Control-Allow-Methods": true
                    },
                    "ResponseModels": {}
                  }
                ],
                "RequestParameters": {},
                "Integration": {
                  "Type": "MOCK",
                  "RequestTemplates": {
                    "application/json": "{statusCode:200}"
                  },
                  "ContentHandling": "CONVERT_TO_TEXT",
                  "IntegrationResponses": [
                    {
                      "StatusCode": "200",
                      "ResponseParameters": {
                        "method.response.header.Access-Control-Allow-Origin": "'*'",
                        "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                        "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,GET'"
                      },
                      "ResponseTemplates": {
                        "application/json": ""
                      }
                    }
                  ]
                },
                "ResourceId": {
                  "Ref": "ApiGatewayResourcePostsSuggestionUseridVar"
                },
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                }
              }
            },
            "ApiGatewayMethodRepliesCreateOptions": {
              "Type": "AWS::ApiGateway::Method",
              "Properties": {
                "AuthorizationType": "NONE",
                "HttpMethod": "OPTIONS",
                "MethodResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": true,
                      "method.response.header.Access-Control-Allow-Headers": true,
                      "method.response.header.Access-Control-Allow-Methods": true
                    },
                    "ResponseModels": {}
                  }
                ],
                "RequestParameters": {},
                "Integration": {
                  "Type": "MOCK",
                  "RequestTemplates": {
                    "application/json": "{statusCode:200}"
                  },
                  "ContentHandling": "CONVERT_TO_TEXT",
                  "IntegrationResponses": [
                    {
                      "StatusCode": "200",
                      "ResponseParameters": {
                        "method.response.header.Access-Control-Allow-Origin": "'*'",
                        "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                        "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,POST'"
                      },
                      "ResponseTemplates": {
                        "application/json": ""
                      }
                    }
                  ]
                },
                "ResourceId": {
                  "Ref": "ApiGatewayResourceRepliesCreate"
                },
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                }
              }
            },
            "ApiGatewayMethodRepliesGetreplyPostidVarOptions": {
              "Type": "AWS::ApiGateway::Method",
              "Properties": {
                "AuthorizationType": "NONE",
                "HttpMethod": "OPTIONS",
                "MethodResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": true,
                      "method.response.header.Access-Control-Allow-Headers": true,
                      "method.response.header.Access-Control-Allow-Methods": true
                    },
                    "ResponseModels": {}
                  }
                ],
                "RequestParameters": {},
                "Integration": {
                  "Type": "MOCK",
                  "RequestTemplates": {
                    "application/json": "{statusCode:200}"
                  },
                  "ContentHandling": "CONVERT_TO_TEXT",
                  "IntegrationResponses": [
                    {
                      "StatusCode": "200",
                      "ResponseParameters": {
                        "method.response.header.Access-Control-Allow-Origin": "'*'",
                        "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                        "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,GET'"
                      },
                      "ResponseTemplates": {
                        "application/json": ""
                      }
                    }
                  ]
                },
                "ResourceId": {
                  "Ref": "ApiGatewayResourceRepliesGetreplyPostidVar"
                },
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                }
              }
            },
            "ApiGatewayMethodRepliesDelrepReplyidVarOptions": {
              "Type": "AWS::ApiGateway::Method",
              "Properties": {
                "AuthorizationType": "NONE",
                "HttpMethod": "OPTIONS",
                "MethodResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": true,
                      "method.response.header.Access-Control-Allow-Headers": true,
                      "method.response.header.Access-Control-Allow-Methods": true
                    },
                    "ResponseModels": {}
                  }
                ],
                "RequestParameters": {},
                "Integration": {
                  "Type": "MOCK",
                  "RequestTemplates": {
                    "application/json": "{statusCode:200}"
                  },
                  "ContentHandling": "CONVERT_TO_TEXT",
                  "IntegrationResponses": [
                    {
                      "StatusCode": "200",
                      "ResponseParameters": {
                        "method.response.header.Access-Control-Allow-Origin": "'*'",
                        "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                        "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,DELETE'"
                      },
                      "ResponseTemplates": {
                        "application/json": ""
                      }
                    }
                  ]
                },
                "ResourceId": {
                  "Ref": "ApiGatewayResourceRepliesDelrepReplyidVar"
                },
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                }
              }
            },
            "ApiGatewayMethodLikePostidVarOptions": {
              "Type": "AWS::ApiGateway::Method",
              "Properties": {
                "AuthorizationType": "NONE",
                "HttpMethod": "OPTIONS",
                "MethodResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": true,
                      "method.response.header.Access-Control-Allow-Headers": true,
                      "method.response.header.Access-Control-Allow-Methods": true
                    },
                    "ResponseModels": {}
                  }
                ],
                "RequestParameters": {},
                "Integration": {
                  "Type": "MOCK",
                  "RequestTemplates": {
                    "application/json": "{statusCode:200}"
                  },
                  "ContentHandling": "CONVERT_TO_TEXT",
                  "IntegrationResponses": [
                    {
                      "StatusCode": "200",
                      "ResponseParameters": {
                        "method.response.header.Access-Control-Allow-Origin": "'*'",
                        "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                        "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,POST'"
                      },
                      "ResponseTemplates": {
                        "application/json": ""
                      }
                    }
                  ]
                },
                "ResourceId": {
                  "Ref": "ApiGatewayResourceLikePostidVar"
                },
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                }
              }
            },
            "ApiGatewayMethodUnlikePostidVarOptions": {
              "Type": "AWS::ApiGateway::Method",
              "Properties": {
                "AuthorizationType": "NONE",
                "HttpMethod": "OPTIONS",
                "MethodResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": true,
                      "method.response.header.Access-Control-Allow-Headers": true,
                      "method.response.header.Access-Control-Allow-Methods": true
                    },
                    "ResponseModels": {}
                  }
                ],
                "RequestParameters": {},
                "Integration": {
                  "Type": "MOCK",
                  "RequestTemplates": {
                    "application/json": "{statusCode:200}"
                  },
                  "ContentHandling": "CONVERT_TO_TEXT",
                  "IntegrationResponses": [
                    {
                      "StatusCode": "200",
                      "ResponseParameters": {
                        "method.response.header.Access-Control-Allow-Origin": "'*'",
                        "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                        "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,POST'"
                      },
                      "ResponseTemplates": {
                        "application/json": ""
                      }
                    }
                  ]
                },
                "ResourceId": {
                  "Ref": "ApiGatewayResourceUnlikePostidVar"
                },
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                }
              }
            },
            "ApiGatewayMethodLikestatePostidVarUseridVarOptions": {
              "Type": "AWS::ApiGateway::Method",
              "Properties": {
                "AuthorizationType": "NONE",
                "HttpMethod": "OPTIONS",
                "MethodResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": true,
                      "method.response.header.Access-Control-Allow-Headers": true,
                      "method.response.header.Access-Control-Allow-Methods": true
                    },
                    "ResponseModels": {}
                  }
                ],
                "RequestParameters": {},
                "Integration": {
                  "Type": "MOCK",
                  "RequestTemplates": {
                    "application/json": "{statusCode:200}"
                  },
                  "ContentHandling": "CONVERT_TO_TEXT",
                  "IntegrationResponses": [
                    {
                      "StatusCode": "200",
                      "ResponseParameters": {
                        "method.response.header.Access-Control-Allow-Origin": "'*'",
                        "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                        "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,GET'"
                      },
                      "ResponseTemplates": {
                        "application/json": ""
                      }
                    }
                  ]
                },
                "ResourceId": {
                  "Ref": "ApiGatewayResourceLikestatePostidVarUseridVar"
                },
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                }
              }
            },
            "ApiGatewayMethodLoginPost": {
              "Type": "AWS::ApiGateway::Method",
              "Properties": {
                "HttpMethod": "POST",
                "RequestParameters": {},
                "ResourceId": {
                  "Ref": "ApiGatewayResourceLogin"
                },
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                },
                "ApiKeyRequired": "<REDACTED>",
                "AuthorizationType": "NONE",
                "Integration": {
                  "IntegrationHttpMethod": "POST",
                  "Type": "AWS_PROXY",
                  "Uri": {
                    "Fn::Join": [
                      "",
                      [
                        "arn:",
                        {
                          "Ref": "AWS::Partition"
                        },
                        ":apigateway:",
                        {
                          "Ref": "AWS::Region"
                        },
                        ":lambda:path/2015-03-31/functions/",
                        {
                          "Fn::GetAtt": [
                            "AuthServiceLambdaFunction",
                            "Arn"
                          ]
                        },
                        "/invocations"
                      ]
                    ]
                  }
                },
                "MethodResponses": []
              },
              "DependsOn": [
                "AuthServiceLambdaPermissionApiGateway"
              ]
            },
            "ApiGatewayMethodSignupPost": {
              "Type": "AWS::ApiGateway::Method",
              "Properties": {
                "HttpMethod": "POST",
                "RequestParameters": {},
                "ResourceId": {
                  "Ref": "ApiGatewayResourceSignup"
                },
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                },
                "ApiKeyRequired": "<REDACTED>",
                "AuthorizationType": "NONE",
                "Integration": {
                  "IntegrationHttpMethod": "POST",
                  "Type": "AWS_PROXY",
                  "Uri": {
                    "Fn::Join": [
                      "",
                      [
                        "arn:",
                        {
                          "Ref": "AWS::Partition"
                        },
                        ":apigateway:",
                        {
                          "Ref": "AWS::Region"
                        },
                        ":lambda:path/2015-03-31/functions/",
                        {
                          "Fn::GetAtt": [
                            "AuthServiceLambdaFunction",
                            "Arn"
                          ]
                        },
                        "/invocations"
                      ]
                    ]
                  }
                },
                "MethodResponses": []
              },
              "DependsOn": [
                "AuthServiceLambdaPermissionApiGateway"
              ]
            },
            "ApiGatewayMethodUsersGetuserbyidUseridVarGet": {
              "Type": "AWS::ApiGateway::Method",
              "Properties": {
                "HttpMethod": "GET",
                "RequestParameters": {},
                "ResourceId": {
                  "Ref": "ApiGatewayResourceUsersGetuserbyidUseridVar"
                },
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                },
                "ApiKeyRequired": "<REDACTED>",
                "AuthorizationType": "NONE",
                "Integration": {
                  "IntegrationHttpMethod": "POST",
                  "Type": "AWS_PROXY",
                  "Uri": {
                    "Fn::Join": [
                      "",
                      [
                        "arn:",
                        {
                          "Ref": "AWS::Partition"
                        },
                        ":apigateway:",
                        {
                          "Ref": "AWS::Region"
                        },
                        ":lambda:path/2015-03-31/functions/",
                        {
                          "Fn::GetAtt": [
                            "UserServiceLambdaFunction",
                            "Arn"
                          ]
                        },
                        "/invocations"
                      ]
                    ]
                  }
                },
                "MethodResponses": []
              },
              "DependsOn": [
                "UserServiceLambdaPermissionApiGateway"
              ]
            },
            "ApiGatewayMethodUsersUpdateuserUseridVarPut": {
              "Type": "AWS::ApiGateway::Method",
              "Properties": {
                "HttpMethod": "PUT",
                "RequestParameters": {},
                "ResourceId": {
                  "Ref": "ApiGatewayResourceUsersUpdateuserUseridVar"
                },
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                },
                "ApiKeyRequired": "<REDACTED>",
                "AuthorizationType": "NONE",
                "Integration": {
                  "IntegrationHttpMethod": "POST",
                  "Type": "AWS_PROXY",
                  "Uri": {
                    "Fn::Join": [
                      "",
                      [
                        "arn:",
                        {
                          "Ref": "AWS::Partition"
                        },
                        ":apigateway:",
                        {
                          "Ref": "AWS::Region"
                        },
                        ":lambda:path/2015-03-31/functions/",
                        {
                          "Fn::GetAtt": [
                            "UserServiceLambdaFunction",
                            "Arn"
                          ]
                        },
                        "/invocations"
                      ]
                    ]
                  }
                },
                "MethodResponses": []
              },
              "DependsOn": [
                "UserServiceLambdaPermissionApiGateway"
              ]
            },
            "ApiGatewayMethodUsersGetallUsernamesGet": {
              "Type": "AWS::ApiGateway::Method",
              "Properties": {
                "HttpMethod": "GET",
                "RequestParameters": {},
                "ResourceId": {
                  "Ref": "ApiGatewayResourceUsersGetallUsernames"
                },
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                },
                "ApiKeyRequired": "<REDACTED>",
                "AuthorizationType": "NONE",
                "Integration": {
                  "IntegrationHttpMethod": "POST",
                  "Type": "AWS_PROXY",
                  "Uri": {
                    "Fn::Join": [
                      "",
                      [
                        "arn:",
                        {
                          "Ref": "AWS::Partition"
                        },
                        ":apigateway:",
                        {
                          "Ref": "AWS::Region"
                        },
                        ":lambda:path/2015-03-31/functions/",
                        {
                          "Fn::GetAtt": [
                            "UserServiceLambdaFunction",
                            "Arn"
                          ]
                        },
                        "/invocations"
                      ]
                    ]
                  }
                },
                "MethodResponses": []
              },
              "DependsOn": [
                "UserServiceLambdaPermissionApiGateway"
              ]
            },
            "ApiGatewayMethodUsersUseridVarRecentDashactivityGet": {
              "Type": "AWS::ApiGateway::Method",
              "Properties": {
                "HttpMethod": "GET",
                "RequestParameters": {},
                "ResourceId": {
                  "Ref": "ApiGatewayResourceUsersUseridVarRecentDashactivity"
                },
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                },
                "ApiKeyRequired": "<REDACTED>",
                "AuthorizationType": "NONE",
                "Integration": {
                  "IntegrationHttpMethod": "POST",
                  "Type": "AWS_PROXY",
                  "Uri": {
                    "Fn::Join": [
                      "",
                      [
                        "arn:",
                        {
                          "Ref": "AWS::Partition"
                        },
                        ":apigateway:",
                        {
                          "Ref": "AWS::Region"
                        },
                        ":lambda:path/2015-03-31/functions/",
                        {
                          "Fn::GetAtt": [
                            "UserServiceLambdaFunction",
                            "Arn"
                          ]
                        },
                        "/invocations"
                      ]
                    ]
                  }
                },
                "MethodResponses": []
              },
              "DependsOn": [
                "UserServiceLambdaPermissionApiGateway"
              ]
            },
            "ApiGatewayMethodPostsCreatePost": {
              "Type": "AWS::ApiGateway::Method",
              "Properties": {
                "HttpMethod": "POST",
                "RequestParameters": {},
                "ResourceId": {
                  "Ref": "ApiGatewayResourcePostsCreate"
                },
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                },
                "ApiKeyRequired": "<REDACTED>",
                "AuthorizationType": "NONE",
                "Integration": {
                  "IntegrationHttpMethod": "POST",
                  "Type": "AWS_PROXY",
                  "Uri": {
                    "Fn::Join": [
                      "",
                      [
                        "arn:",
                        {
                          "Ref": "AWS::Partition"
                        },
                        ":apigateway:",
                        {
                          "Ref": "AWS::Region"
                        },
                        ":lambda:path/2015-03-31/functions/",
                        {
                          "Fn::GetAtt": [
                            "PostsServiceLambdaFunction",
                            "Arn"
                          ]
                        },
                        "/invocations"
                      ]
                    ]
                  }
                },
                "MethodResponses": []
              },
              "DependsOn": [
                "PostsServiceLambdaPermissionApiGateway"
              ]
            },
            "ApiGatewayMethodPostsUpdatePostidVarPut": {
              "Type": "AWS::ApiGateway::Method",
              "Properties": {
                "HttpMethod": "PUT",
                "RequestParameters": {},
                "ResourceId": {
                  "Ref": "ApiGatewayResourcePostsUpdatePostidVar"
                },
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                },
                "ApiKeyRequired": "<REDACTED>",
                "AuthorizationType": "NONE",
                "Integration": {
                  "IntegrationHttpMethod": "POST",
                  "Type": "AWS_PROXY",
                  "Uri": {
                    "Fn::Join": [
                      "",
                      [
                        "arn:",
                        {
                          "Ref": "AWS::Partition"
                        },
                        ":apigateway:",
                        {
                          "Ref": "AWS::Region"
                        },
                        ":lambda:path/2015-03-31/functions/",
                        {
                          "Fn::GetAtt": [
                            "PostsServiceLambdaFunction",
                            "Arn"
                          ]
                        },
                        "/invocations"
                      ]
                    ]
                  }
                },
                "MethodResponses": []
              },
              "DependsOn": [
                "PostsServiceLambdaPermissionApiGateway"
              ]
            },
            "ApiGatewayMethodPostsDeletePostidVarDelete": {
              "Type": "AWS::ApiGateway::Method",
              "Properties": {
                "HttpMethod": "DELETE",
                "RequestParameters": {},
                "ResourceId": {
                  "Ref": "ApiGatewayResourcePostsDeletePostidVar"
                },
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                },
                "ApiKeyRequired": "<REDACTED>",
                "AuthorizationType": "NONE",
                "Integration": {
                  "IntegrationHttpMethod": "POST",
                  "Type": "AWS_PROXY",
                  "Uri": {
                    "Fn::Join": [
                      "",
                      [
                        "arn:",
                        {
                          "Ref": "AWS::Partition"
                        },
                        ":apigateway:",
                        {
                          "Ref": "AWS::Region"
                        },
                        ":lambda:path/2015-03-31/functions/",
                        {
                          "Fn::GetAtt": [
                            "PostsServiceLambdaFunction",
                            "Arn"
                          ]
                        },
                        "/invocations"
                      ]
                    ]
                  }
                },
                "MethodResponses": []
              },
              "DependsOn": [
                "PostsServiceLambdaPermissionApiGateway"
              ]
            },
            "ApiGatewayMethodPostsCheersUseridVarGet": {
              "Type": "AWS::ApiGateway::Method",
              "Properties": {
                "HttpMethod": "GET",
                "RequestParameters": {},
                "ResourceId": {
                  "Ref": "ApiGatewayResourcePostsCheersUseridVar"
                },
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                },
                "ApiKeyRequired": "<REDACTED>",
                "AuthorizationType": "NONE",
                "Integration": {
                  "IntegrationHttpMethod": "POST",
                  "Type": "AWS_PROXY",
                  "Uri": {
                    "Fn::Join": [
                      "",
                      [
                        "arn:",
                        {
                          "Ref": "AWS::Partition"
                        },
                        ":apigateway:",
                        {
                          "Ref": "AWS::Region"
                        },
                        ":lambda:path/2015-03-31/functions/",
                        {
                          "Fn::GetAtt": [
                            "PostsServiceLambdaFunction",
                            "Arn"
                          ]
                        },
                        "/invocations"
                      ]
                    ]
                  }
                },
                "MethodResponses": []
              },
              "DependsOn": [
                "PostsServiceLambdaPermissionApiGateway"
              ]
            },
            "ApiGatewayMethodPostsFeedbackUseridVarGet": {
              "Type": "AWS::ApiGateway::Method",
              "Properties": {
                "HttpMethod": "GET",
                "RequestParameters": {},
                "ResourceId": {
                  "Ref": "ApiGatewayResourcePostsFeedbackUseridVar"
                },
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                },
                "ApiKeyRequired": "<REDACTED>",
                "AuthorizationType": "NONE",
                "Integration": {
                  "IntegrationHttpMethod": "POST",
                  "Type": "AWS_PROXY",
                  "Uri": {
                    "Fn::Join": [
                      "",
                      [
                        "arn:",
                        {
                          "Ref": "AWS::Partition"
                        },
                        ":apigateway:",
                        {
                          "Ref": "AWS::Region"
                        },
                        ":lambda:path/2015-03-31/functions/",
                        {
                          "Fn::GetAtt": [
                            "PostsServiceLambdaFunction",
                            "Arn"
                          ]
                        },
                        "/invocations"
                      ]
                    ]
                  }
                },
                "MethodResponses": []
              },
              "DependsOn": [
                "PostsServiceLambdaPermissionApiGateway"
              ]
            },
            "ApiGatewayMethodPostsSuggestionUseridVarGet": {
              "Type": "AWS::ApiGateway::Method",
              "Properties": {
                "HttpMethod": "GET",
                "RequestParameters": {},
                "ResourceId": {
                  "Ref": "ApiGatewayResourcePostsSuggestionUseridVar"
                },
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                },
                "ApiKeyRequired": "<REDACTED>",
                "AuthorizationType": "NONE",
                "Integration": {
                  "IntegrationHttpMethod": "POST",
                  "Type": "AWS_PROXY",
                  "Uri": {
                    "Fn::Join": [
                      "",
                      [
                        "arn:",
                        {
                          "Ref": "AWS::Partition"
                        },
                        ":apigateway:",
                        {
                          "Ref": "AWS::Region"
                        },
                        ":lambda:path/2015-03-31/functions/",
                        {
                          "Fn::GetAtt": [
                            "PostsServiceLambdaFunction",
                            "Arn"
                          ]
                        },
                        "/invocations"
                      ]
                    ]
                  }
                },
                "MethodResponses": []
              },
              "DependsOn": [
                "PostsServiceLambdaPermissionApiGateway"
              ]
            },
            "ApiGatewayMethodRepliesCreatePost": {
              "Type": "AWS::ApiGateway::Method",
              "Properties": {
                "HttpMethod": "POST",
                "RequestParameters": {},
                "ResourceId": {
                  "Ref": "ApiGatewayResourceRepliesCreate"
                },
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                },
                "ApiKeyRequired": "<REDACTED>",
                "AuthorizationType": "NONE",
                "Integration": {
                  "IntegrationHttpMethod": "POST",
                  "Type": "AWS_PROXY",
                  "Uri": {
                    "Fn::Join": [
                      "",
                      [
                        "arn:",
                        {
                          "Ref": "AWS::Partition"
                        },
                        ":apigateway:",
                        {
                          "Ref": "AWS::Region"
                        },
                        ":lambda:path/2015-03-31/functions/",
                        {
                          "Fn::GetAtt": [
                            "RepliesServiceLambdaFunction",
                            "Arn"
                          ]
                        },
                        "/invocations"
                      ]
                    ]
                  }
                },
                "MethodResponses": []
              },
              "DependsOn": [
                "RepliesServiceLambdaPermissionApiGateway"
              ]
            },
            "ApiGatewayMethodRepliesGetreplyPostidVarGet": {
              "Type": "AWS::ApiGateway::Method",
              "Properties": {
                "HttpMethod": "GET",
                "RequestParameters": {},
                "ResourceId": {
                  "Ref": "ApiGatewayResourceRepliesGetreplyPostidVar"
                },
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                },
                "ApiKeyRequired": "<REDACTED>",
                "AuthorizationType": "NONE",
                "Integration": {
                  "IntegrationHttpMethod": "POST",
                  "Type": "AWS_PROXY",
                  "Uri": {
                    "Fn::Join": [
                      "",
                      [
                        "arn:",
                        {
                          "Ref": "AWS::Partition"
                        },
                        ":apigateway:",
                        {
                          "Ref": "AWS::Region"
                        },
                        ":lambda:path/2015-03-31/functions/",
                        {
                          "Fn::GetAtt": [
                            "RepliesServiceLambdaFunction",
                            "Arn"
                          ]
                        },
                        "/invocations"
                      ]
                    ]
                  }
                },
                "MethodResponses": []
              },
              "DependsOn": [
                "RepliesServiceLambdaPermissionApiGateway"
              ]
            },
            "ApiGatewayMethodRepliesDelrepReplyidVarDelete": {
              "Type": "AWS::ApiGateway::Method",
              "Properties": {
                "HttpMethod": "DELETE",
                "RequestParameters": {},
                "ResourceId": {
                  "Ref": "ApiGatewayResourceRepliesDelrepReplyidVar"
                },
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                },
                "ApiKeyRequired": "<REDACTED>",
                "AuthorizationType": "NONE",
                "Integration": {
                  "IntegrationHttpMethod": "POST",
                  "Type": "AWS_PROXY",
                  "Uri": {
                    "Fn::Join": [
                      "",
                      [
                        "arn:",
                        {
                          "Ref": "AWS::Partition"
                        },
                        ":apigateway:",
                        {
                          "Ref": "AWS::Region"
                        },
                        ":lambda:path/2015-03-31/functions/",
                        {
                          "Fn::GetAtt": [
                            "RepliesServiceLambdaFunction",
                            "Arn"
                          ]
                        },
                        "/invocations"
                      ]
                    ]
                  }
                },
                "MethodResponses": []
              },
              "DependsOn": [
                "RepliesServiceLambdaPermissionApiGateway"
              ]
            },
            "ApiGatewayMethodLikePostidVarPost": {
              "Type": "AWS::ApiGateway::Method",
              "Properties": {
                "HttpMethod": "POST",
                "RequestParameters": {},
                "ResourceId": {
                  "Ref": "ApiGatewayResourceLikePostidVar"
                },
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                },
                "ApiKeyRequired": "<REDACTED>",
                "AuthorizationType": "NONE",
                "Integration": {
                  "IntegrationHttpMethod": "POST",
                  "Type": "AWS_PROXY",
                  "Uri": {
                    "Fn::Join": [
                      "",
                      [
                        "arn:",
                        {
                          "Ref": "AWS::Partition"
                        },
                        ":apigateway:",
                        {
                          "Ref": "AWS::Region"
                        },
                        ":lambda:path/2015-03-31/functions/",
                        {
                          "Fn::GetAtt": [
                            "LikesServiceLambdaFunction",
                            "Arn"
                          ]
                        },
                        "/invocations"
                      ]
                    ]
                  }
                },
                "MethodResponses": []
              },
              "DependsOn": [
                "LikesServiceLambdaPermissionApiGateway"
              ]
            },
            "ApiGatewayMethodUnlikePostidVarPost": {
              "Type": "AWS::ApiGateway::Method",
              "Properties": {
                "HttpMethod": "POST",
                "RequestParameters": {},
                "ResourceId": {
                  "Ref": "ApiGatewayResourceUnlikePostidVar"
                },
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                },
                "ApiKeyRequired": "<REDACTED>",
                "AuthorizationType": "NONE",
                "Integration": {
                  "IntegrationHttpMethod": "POST",
                  "Type": "AWS_PROXY",
                  "Uri": {
                    "Fn::Join": [
                      "",
                      [
                        "arn:",
                        {
                          "Ref": "AWS::Partition"
                        },
                        ":apigateway:",
                        {
                          "Ref": "AWS::Region"
                        },
                        ":lambda:path/2015-03-31/functions/",
                        {
                          "Fn::GetAtt": [
                            "LikesServiceLambdaFunction",
                            "Arn"
                          ]
                        },
                        "/invocations"
                      ]
                    ]
                  }
                },
                "MethodResponses": []
              },
              "DependsOn": [
                "LikesServiceLambdaPermissionApiGateway"
              ]
            },
            "ApiGatewayMethodLikestatePostidVarUseridVarGet": {
              "Type": "AWS::ApiGateway::Method",
              "Properties": {
                "HttpMethod": "GET",
                "RequestParameters": {},
                "ResourceId": {
                  "Ref": "ApiGatewayResourceLikestatePostidVarUseridVar"
                },
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                },
                "ApiKeyRequired": "<REDACTED>",
                "AuthorizationType": "NONE",
                "Integration": {
                  "IntegrationHttpMethod": "POST",
                  "Type": "AWS_PROXY",
                  "Uri": {
                    "Fn::Join": [
                      "",
                      [
                        "arn:",
                        {
                          "Ref": "AWS::Partition"
                        },
                        ":apigateway:",
                        {
                          "Ref": "AWS::Region"
                        },
                        ":lambda:path/2015-03-31/functions/",
                        {
                          "Fn::GetAtt": [
                            "LikesServiceLambdaFunction",
                            "Arn"
                          ]
                        },
                        "/invocations"
                      ]
                    ]
                  }
                },
                "MethodResponses": []
              },
              "DependsOn": [
                "LikesServiceLambdaPermissionApiGateway"
              ]
            },
            "ApiGatewayDeployment1725209985802": {
              "Type": "AWS::ApiGateway::Deployment",
              "Properties": {
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                },
                "StageName": "dev"
              },
              "DependsOn": [
                "ApiGatewayMethodLoginOptions",
                "ApiGatewayMethodSignupOptions",
                "ApiGatewayMethodUsersGetuserbyidUseridVarOptions",
                "ApiGatewayMethodUsersUpdateuserUseridVarOptions",
                "ApiGatewayMethodUsersGetallUsernamesOptions",
                "ApiGatewayMethodUsersUseridVarRecentDashactivityOptions",
                "ApiGatewayMethodPostsCreateOptions",
                "ApiGatewayMethodPostsUpdatePostidVarOptions",
                "ApiGatewayMethodPostsDeletePostidVarOptions",
                "ApiGatewayMethodPostsCheersUseridVarOptions",
                "ApiGatewayMethodPostsFeedbackUseridVarOptions",
                "ApiGatewayMethodPostsSuggestionUseridVarOptions",
                "ApiGatewayMethodRepliesCreateOptions",
                "ApiGatewayMethodRepliesGetreplyPostidVarOptions",
                "ApiGatewayMethodRepliesDelrepReplyidVarOptions",
                "ApiGatewayMethodLikePostidVarOptions",
                "ApiGatewayMethodUnlikePostidVarOptions",
                "ApiGatewayMethodLikestatePostidVarUseridVarOptions",
                "ApiGatewayMethodLoginPost",
                "ApiGatewayMethodSignupPost",
                "ApiGatewayMethodUsersGetuserbyidUseridVarGet",
                "ApiGatewayMethodUsersUpdateuserUseridVarPut",
                "ApiGatewayMethodUsersGetallUsernamesGet",
                "ApiGatewayMethodUsersUseridVarRecentDashactivityGet",
                "ApiGatewayMethodPostsCreatePost",
                "ApiGatewayMethodPostsUpdatePostidVarPut",
                "ApiGatewayMethodPostsDeletePostidVarDelete",
                "ApiGatewayMethodPostsCheersUseridVarGet",
                "ApiGatewayMethodPostsFeedbackUseridVarGet",
                "ApiGatewayMethodPostsSuggestionUseridVarGet",
                "ApiGatewayMethodRepliesCreatePost",
                "ApiGatewayMethodRepliesGetreplyPostidVarGet",
                "ApiGatewayMethodRepliesDelrepReplyidVarDelete",
                "ApiGatewayMethodLikePostidVarPost",
                "ApiGatewayMethodUnlikePostidVarPost",
                "ApiGatewayMethodLikestatePostidVarUseridVarGet"
              ]
            },
            "AuthServiceLambdaPermissionApiGateway": {
              "Type": "AWS::Lambda::Permission",
              "Properties": {
                "FunctionName": {
                  "Fn::GetAtt": [
                    "AuthServiceLambdaFunction",
                    "Arn"
                  ]
                },
                "Action": "lambda:InvokeFunction",
                "Principal": "apigateway.amazonaws.com",
                "SourceArn": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":execute-api:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":",
                      {
                        "Ref": "AWS::AccountId"
                      },
                      ":",
                      {
                        "Ref": "ApiGatewayRestApi"
                      },
                      "/*/*"
                    ]
                  ]
                }
              }
            },
            "UserServiceLambdaPermissionApiGateway": {
              "Type": "AWS::Lambda::Permission",
              "Properties": {
                "FunctionName": {
                  "Fn::GetAtt": [
                    "UserServiceLambdaFunction",
                    "Arn"
                  ]
                },
                "Action": "lambda:InvokeFunction",
                "Principal": "apigateway.amazonaws.com",
                "SourceArn": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":execute-api:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":",
                      {
                        "Ref": "AWS::AccountId"
                      },
                      ":",
                      {
                        "Ref": "ApiGatewayRestApi"
                      },
                      "/*/*"
                    ]
                  ]
                }
              }
            },
            "PostsServiceLambdaPermissionApiGateway": {
              "Type": "AWS::Lambda::Permission",
              "Properties": {
                "FunctionName": {
                  "Fn::GetAtt": [
                    "PostsServiceLambdaFunction",
                    "Arn"
                  ]
                },
                "Action": "lambda:InvokeFunction",
                "Principal": "apigateway.amazonaws.com",
                "SourceArn": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":execute-api:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":",
                      {
                        "Ref": "AWS::AccountId"
                      },
                      ":",
                      {
                        "Ref": "ApiGatewayRestApi"
                      },
                      "/*/*"
                    ]
                  ]
                }
              }
            },
            "RepliesServiceLambdaPermissionApiGateway": {
              "Type": "AWS::Lambda::Permission",
              "Properties": {
                "FunctionName": {
                  "Fn::GetAtt": [
                    "RepliesServiceLambdaFunction",
                    "Arn"
                  ]
                },
                "Action": "lambda:InvokeFunction",
                "Principal": "apigateway.amazonaws.com",
                "SourceArn": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":execute-api:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":",
                      {
                        "Ref": "AWS::AccountId"
                      },
                      ":",
                      {
                        "Ref": "ApiGatewayRestApi"
                      },
                      "/*/*"
                    ]
                  ]
                }
              }
            },
            "LikesServiceLambdaPermissionApiGateway": {
              "Type": "AWS::Lambda::Permission",
              "Properties": {
                "FunctionName": {
                  "Fn::GetAtt": [
                    "LikesServiceLambdaFunction",
                    "Arn"
                  ]
                },
                "Action": "lambda:InvokeFunction",
                "Principal": "apigateway.amazonaws.com",
                "SourceArn": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":execute-api:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":",
                      {
                        "Ref": "AWS::AccountId"
                      },
                      ":",
                      {
                        "Ref": "ApiGatewayRestApi"
                      },
                      "/*/*"
                    ]
                  ]
                }
              }
            }
          },
          "Outputs": {
            "ServerlessDeploymentBucketName": {
              "Value": {
                "Ref": "ServerlessDeploymentBucket"
              },
              "Export": {
                "Name": "sls-montyyvoicee-dev-ServerlessDeploymentBucketName"
              }
            },
            "AuthServiceLambdaFunctionQualifiedArn": {
              "Description": "Current Lambda function version",
              "Value": {
                "Ref": "AuthServiceLambdaVersionPyWSxqwULf5QDBONx9wa5ZDTThhEgU56MqaynHDwc"
              },
              "Export": {
                "Name": "sls-montyyvoicee-dev-AuthServiceLambdaFunctionQualifiedArn"
              }
            },
            "UserServiceLambdaFunctionQualifiedArn": {
              "Description": "Current Lambda function version",
              "Value": {
                "Ref": "UserServiceLambdaVersionQB9drLwVGhEKKIcXrDk1VBtdNLpDal6EydVXfrtcttg"
              },
              "Export": {
                "Name": "sls-montyyvoicee-dev-UserServiceLambdaFunctionQualifiedArn"
              }
            },
            "PostsServiceLambdaFunctionQualifiedArn": {
              "Description": "Current Lambda function version",
              "Value": {
                "Ref": "PostsServiceLambdaVersionVihIWL3g2gy4B68iPaiYsEdXeyk0EljJOPBwtQk"
              },
              "Export": {
                "Name": "sls-montyyvoicee-dev-PostsServiceLambdaFunctionQualifiedArn"
              }
            },
            "RepliesServiceLambdaFunctionQualifiedArn": {
              "Description": "Current Lambda function version",
              "Value": {
                "Ref": "RepliesServiceLambdaVersionYk4elqV4OFKmVqYiEuo9pvGXZ7Cyh4wlszThnMPU"
              },
              "Export": {
                "Name": "sls-montyyvoicee-dev-RepliesServiceLambdaFunctionQualifiedArn"
              }
            },
            "LikesServiceLambdaFunctionQualifiedArn": {
              "Description": "Current Lambda function version",
              "Value": {
                "Ref": "LikesServiceLambdaVersionENfkC3rJBzp5OS0iufb8kRcSWrIASBjVjKR03SWjDU"
              },
              "Export": {
                "Name": "sls-montyyvoicee-dev-LikesServiceLambdaFunctionQualifiedArn"
              }
            },
            "ServiceEndpoint": {
              "Description": "URL of the service endpoint",
              "Value": {
                "Fn::Join": [
                  "",
                  [
                    "https://",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    ".execute-api.",
                    {
                      "Ref": "AWS::Region"
                    },
                    ".",
                    {
                      "Ref": "AWS::URLSuffix"
                    },
                    "/dev"
                  ]
                ]
              },
              "Export": {
                "Name": "sls-montyyvoicee-dev-ServiceEndpoint"
              }
            }
          }
        },
        "coreCloudFormationTemplate": {
          "AWSTemplateFormatVersion": "2010-09-09",
          "Description": "The AWS CloudFormation template for this Serverless application",
          "Resources": {
            "ServerlessDeploymentBucket": {
              "Type": "AWS::S3::Bucket",
              "Properties": {
                "BucketEncryption": {
                  "ServerSideEncryptionConfiguration": [
                    {
                      "ServerSideEncryptionByDefault": {
                        "SSEAlgorithm": "AES256"
                      }
                    }
                  ]
                }
              }
            },
            "ServerlessDeploymentBucketPolicy": {
              "Type": "AWS::S3::BucketPolicy",
              "Properties": {
                "Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "PolicyDocument": {
                  "Statement": [
                    {
                      "Action": "s3:*",
                      "Effect": "Deny",
                      "Principal": "*",
                      "Resource": [
                        {
                          "Fn::Join": [
                            "",
                            [
                              "arn:",
                              {
                                "Ref": "AWS::Partition"
                              },
                              ":s3:::",
                              {
                                "Ref": "ServerlessDeploymentBucket"
                              },
                              "/*"
                            ]
                          ]
                        },
                        {
                          "Fn::Join": [
                            "",
                            [
                              "arn:",
                              {
                                "Ref": "AWS::Partition"
                              },
                              ":s3:::",
                              {
                                "Ref": "ServerlessDeploymentBucket"
                              }
                            ]
                          ]
                        }
                      ],
                      "Condition": {
                        "Bool": {
                          "aws:SecureTransport": false
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "Outputs": {
            "ServerlessDeploymentBucketName": {
              "Value": {
                "Ref": "ServerlessDeploymentBucket"
              }
            }
          }
        },
        "vpc": {}
      },
      "functions": {
        "AuthService": {
          "handler": "Auth/main.handler",
          "events": [
            {
              "http": {
                "path": "login",
                "method": "post",
                "cors": {
                  "origin": "*",
                  "methods": [
                    "OPTIONS",
                    "POST"
                  ],
                  "headers": [
                    "Content-Type",
                    "X-Amz-Date",
                    "Authorization",
                    "X-Api-Key",
                    "X-Amz-Security-Token",
                    "X-Amz-User-Agent",
                    "X-Amzn-Trace-Id"
                  ],
                  "allowCredentials": "<REDACTED>"
                },
                "integration": "AWS_PROXY"
              }
            },
            {
              "http": {
                "path": "signup",
                "method": "post",
                "cors": {
                  "origin": "*",
                  "methods": [
                    "OPTIONS",
                    "POST"
                  ],
                  "headers": [
                    "Content-Type",
                    "X-Amz-Date",
                    "Authorization",
                    "X-Api-Key",
                    "X-Amz-Security-Token",
                    "X-Amz-User-Agent",
                    "X-Amzn-Trace-Id"
                  ],
                  "allowCredentials": "<REDACTED>"
                },
                "integration": "AWS_PROXY"
              }
            }
          ],
          "timeout": 60,
          "memorySize": 512,
          "name": "montyyvoicee-dev-AuthService",
          "package": {},
          "memory": 512,
          "runtime": "python3.12",
          "vpc": {},
          "versionLogicalId": "AuthServiceLambdaVersionPyWSxqwULf5QDBONx9wa5ZDTThhEgU56MqaynHDwc"
        },
        "UserService": {
          "handler": "User/main.handler",
          "events": [
            {
              "http": {
                "path": "users/getuserbyid/{user_id}",
                "method": "get",
                "cors": {
                  "origin": "*",
                  "methods": [
                    "OPTIONS",
                    "GET"
                  ],
                  "headers": [
                    "Content-Type",
                    "X-Amz-Date",
                    "Authorization",
                    "X-Api-Key",
                    "X-Amz-Security-Token",
                    "X-Amz-User-Agent",
                    "X-Amzn-Trace-Id"
                  ],
                  "allowCredentials": "<REDACTED>"
                },
                "integration": "AWS_PROXY"
              }
            },
            {
              "http": {
                "path": "users/updateuser/{user_id}",
                "method": "put",
                "cors": {
                  "origin": "*",
                  "methods": [
                    "OPTIONS",
                    "PUT"
                  ],
                  "headers": [
                    "Content-Type",
                    "X-Amz-Date",
                    "Authorization",
                    "X-Api-Key",
                    "X-Amz-Security-Token",
                    "X-Amz-User-Agent",
                    "X-Amzn-Trace-Id"
                  ],
                  "allowCredentials": "<REDACTED>"
                },
                "integration": "AWS_PROXY"
              }
            },
            {
              "http": {
                "path": "users/getall/usernames",
                "method": "get",
                "cors": {
                  "origin": "*",
                  "methods": [
                    "OPTIONS",
                    "GET"
                  ],
                  "headers": [
                    "Content-Type",
                    "X-Amz-Date",
                    "Authorization",
                    "X-Api-Key",
                    "X-Amz-Security-Token",
                    "X-Amz-User-Agent",
                    "X-Amzn-Trace-Id"
                  ],
                  "allowCredentials": "<REDACTED>"
                },
                "integration": "AWS_PROXY"
              }
            },
            {
              "http": {
                "path": "users/{user_id}/recent-activity",
                "method": "get",
                "cors": {
                  "origin": "*",
                  "methods": [
                    "OPTIONS",
                    "GET"
                  ],
                  "headers": [
                    "Content-Type",
                    "X-Amz-Date",
                    "Authorization",
                    "X-Api-Key",
                    "X-Amz-Security-Token",
                    "X-Amz-User-Agent",
                    "X-Amzn-Trace-Id"
                  ],
                  "allowCredentials": "<REDACTED>"
                },
                "integration": "AWS_PROXY"
              }
            }
          ],
          "timeout": 60,
          "memorySize": 512,
          "name": "montyyvoicee-dev-UserService",
          "package": {},
          "memory": 512,
          "runtime": "python3.12",
          "vpc": {},
          "versionLogicalId": "UserServiceLambdaVersionQB9drLwVGhEKKIcXrDk1VBtdNLpDal6EydVXfrtcttg"
        },
        "PostsService": {
          "handler": "Posts/main.handler",
          "events": [
            {
              "http": {
                "path": "posts/create",
                "method": "post",
                "cors": {
                  "origin": "*",
                  "methods": [
                    "OPTIONS",
                    "POST"
                  ],
                  "headers": [
                    "Content-Type",
                    "X-Amz-Date",
                    "Authorization",
                    "X-Api-Key",
                    "X-Amz-Security-Token",
                    "X-Amz-User-Agent",
                    "X-Amzn-Trace-Id"
                  ],
                  "allowCredentials": "<REDACTED>"
                },
                "integration": "AWS_PROXY"
              }
            },
            {
              "http": {
                "path": "posts/update/{post_id}",
                "method": "put",
                "cors": {
                  "origin": "*",
                  "methods": [
                    "OPTIONS",
                    "PUT"
                  ],
                  "headers": [
                    "Content-Type",
                    "X-Amz-Date",
                    "Authorization",
                    "X-Api-Key",
                    "X-Amz-Security-Token",
                    "X-Amz-User-Agent",
                    "X-Amzn-Trace-Id"
                  ],
                  "allowCredentials": "<REDACTED>"
                },
                "integration": "AWS_PROXY"
              }
            },
            {
              "http": {
                "path": "posts/delete/{post_id}",
                "method": "delete",
                "cors": {
                  "origin": "*",
                  "methods": [
                    "OPTIONS",
                    "DELETE"
                  ],
                  "headers": [
                    "Content-Type",
                    "X-Amz-Date",
                    "Authorization",
                    "X-Api-Key",
                    "X-Amz-Security-Token",
                    "X-Amz-User-Agent",
                    "X-Amzn-Trace-Id"
                  ],
                  "allowCredentials": "<REDACTED>"
                },
                "integration": "AWS_PROXY"
              }
            },
            {
              "http": {
                "path": "posts/cheers/{user_id}",
                "method": "get",
                "cors": {
                  "origin": "*",
                  "methods": [
                    "OPTIONS",
                    "GET"
                  ],
                  "headers": [
                    "Content-Type",
                    "X-Amz-Date",
                    "Authorization",
                    "X-Api-Key",
                    "X-Amz-Security-Token",
                    "X-Amz-User-Agent",
                    "X-Amzn-Trace-Id"
                  ],
                  "allowCredentials": "<REDACTED>"
                },
                "integration": "AWS_PROXY"
              }
            },
            {
              "http": {
                "path": "posts/feedback/{user_id}",
                "method": "get",
                "cors": {
                  "origin": "*",
                  "methods": [
                    "OPTIONS",
                    "GET"
                  ],
                  "headers": [
                    "Content-Type",
                    "X-Amz-Date",
                    "Authorization",
                    "X-Api-Key",
                    "X-Amz-Security-Token",
                    "X-Amz-User-Agent",
                    "X-Amzn-Trace-Id"
                  ],
                  "allowCredentials": "<REDACTED>"
                },
                "integration": "AWS_PROXY"
              }
            },
            {
              "http": {
                "path": "posts/suggestion/{user_id}",
                "method": "get",
                "cors": {
                  "origin": "*",
                  "methods": [
                    "OPTIONS",
                    "GET"
                  ],
                  "headers": [
                    "Content-Type",
                    "X-Amz-Date",
                    "Authorization",
                    "X-Api-Key",
                    "X-Amz-Security-Token",
                    "X-Amz-User-Agent",
                    "X-Amzn-Trace-Id"
                  ],
                  "allowCredentials": "<REDACTED>"
                },
                "integration": "AWS_PROXY"
              }
            }
          ],
          "timeout": 60,
          "memorySize": 512,
          "name": "montyyvoicee-dev-PostsService",
          "package": {},
          "memory": 512,
          "runtime": "python3.12",
          "vpc": {},
          "versionLogicalId": "PostsServiceLambdaVersionVihIWL3g2gy4B68iPaiYsEdXeyk0EljJOPBwtQk"
        },
        "RepliesService": {
          "handler": "Replies/main.handler",
          "events": [
            {
              "http": {
                "path": "replies/create",
                "method": "post",
                "cors": {
                  "origin": "*",
                  "methods": [
                    "OPTIONS",
                    "POST"
                  ],
                  "headers": [
                    "Content-Type",
                    "X-Amz-Date",
                    "Authorization",
                    "X-Api-Key",
                    "X-Amz-Security-Token",
                    "X-Amz-User-Agent",
                    "X-Amzn-Trace-Id"
                  ],
                  "allowCredentials": "<REDACTED>"
                },
                "integration": "AWS_PROXY"
              }
            },
            {
              "http": {
                "path": "replies/getreply/{post_id}",
                "method": "get",
                "cors": {
                  "origin": "*",
                  "methods": [
                    "OPTIONS",
                    "GET"
                  ],
                  "headers": [
                    "Content-Type",
                    "X-Amz-Date",
                    "Authorization",
                    "X-Api-Key",
                    "X-Amz-Security-Token",
                    "X-Amz-User-Agent",
                    "X-Amzn-Trace-Id"
                  ],
                  "allowCredentials": "<REDACTED>"
                },
                "integration": "AWS_PROXY"
              }
            },
            {
              "http": {
                "path": "replies/delrep/{reply_id}",
                "method": "delete",
                "cors": {
                  "origin": "*",
                  "methods": [
                    "OPTIONS",
                    "DELETE"
                  ],
                  "headers": [
                    "Content-Type",
                    "X-Amz-Date",
                    "Authorization",
                    "X-Api-Key",
                    "X-Amz-Security-Token",
                    "X-Amz-User-Agent",
                    "X-Amzn-Trace-Id"
                  ],
                  "allowCredentials": "<REDACTED>"
                },
                "integration": "AWS_PROXY"
              }
            }
          ],
          "timeout": 60,
          "memorySize": 512,
          "name": "montyyvoicee-dev-RepliesService",
          "package": {},
          "memory": 512,
          "runtime": "python3.12",
          "vpc": {},
          "versionLogicalId": "RepliesServiceLambdaVersionYk4elqV4OFKmVqYiEuo9pvGXZ7Cyh4wlszThnMPU"
        },
        "LikesService": {
          "handler": "Like/main.handler",
          "events": [
            {
              "http": {
                "path": "like/{post_id}",
                "method": "post",
                "cors": {
                  "origin": "*",
                  "methods": [
                    "OPTIONS",
                    "POST"
                  ],
                  "headers": [
                    "Content-Type",
                    "X-Amz-Date",
                    "Authorization",
                    "X-Api-Key",
                    "X-Amz-Security-Token",
                    "X-Amz-User-Agent",
                    "X-Amzn-Trace-Id"
                  ],
                  "allowCredentials": "<REDACTED>"
                },
                "integration": "AWS_PROXY"
              }
            },
            {
              "http": {
                "path": "unlike/{post_id}",
                "method": "post",
                "cors": {
                  "origin": "*",
                  "methods": [
                    "OPTIONS",
                    "POST"
                  ],
                  "headers": [
                    "Content-Type",
                    "X-Amz-Date",
                    "Authorization",
                    "X-Api-Key",
                    "X-Amz-Security-Token",
                    "X-Amz-User-Agent",
                    "X-Amzn-Trace-Id"
                  ],
                  "allowCredentials": "<REDACTED>"
                },
                "integration": "AWS_PROXY"
              }
            },
            {
              "http": {
                "path": "like_state/{post_id}/{user_id}",
                "method": "get",
                "cors": {
                  "origin": "*",
                  "methods": [
                    "OPTIONS",
                    "GET"
                  ],
                  "headers": [
                    "Content-Type",
                    "X-Amz-Date",
                    "Authorization",
                    "X-Api-Key",
                    "X-Amz-Security-Token",
                    "X-Amz-User-Agent",
                    "X-Amzn-Trace-Id"
                  ],
                  "allowCredentials": "<REDACTED>"
                },
                "integration": "AWS_PROXY"
              }
            }
          ],
          "timeout": 60,
          "memorySize": 512,
          "name": "montyyvoicee-dev-LikesService",
          "package": {},
          "memory": 512,
          "runtime": "python3.12",
          "vpc": {},
          "versionLogicalId": "LikesServiceLambdaVersionENfkC3rJBzp5OS0iufb8kRcSWrIASBjVjKR03SWjDU"
        }
      },
      "custom": {
        "pythonRequirements": {
          "requirementsFile": "requirements.txt",
          "concurrency": 1,
          "pipCmdExtraArgs": [
            "--no-cache-dir",
            "--disable-pip-version-check"
          ]
        },
        "apigwBinary": {
          "types": [
            "multipart/form-data"
          ]
        }
      },
      "plugins": [
        "serverless-python-requirements",
        "serverless-apigw-binary"
      ],
      "package": {
        "patterns": [
          "Auth/**",
          "User/**",
          "Posts/**",
          "Replies/**",
          "Like/**",
          "requirements.txt"
        ],
        "exclude": [
          "node_modules/**",
          "venv/**"
        ],
        "artifactsS3KeyDirname": "serverless/montyyvoicee/dev/code-artifacts",
        "artifact": "C:\\Users\\FazalFathima\\Desktop\\mvo-Copy\\mv-be-cc\\app\\.serverless\\montyyvoicee.zip",
        "artifactDirectoryName": "serverless/montyyvoicee/dev/1725209999006-2024-09-01T16:59:59.006Z"
      }
    },
    "serviceRawFile": "# org: montycloud\r\n# app: montovoicee\r\n# service: montyyvoicee\r\n\r\n# provider:\r\n#   name: aws\r\n#   runtime: python3.12\r\n#   timeout: 30\r\n#   memorySize: 128\r\n#   vpc:\r\n#     securityGroupIds:\r\n#       - sg-0cc877fb568624f4c # Replace with your Security Group ID\r\n#     subnetIds:\r\n#       - subnet-01e4a9a44d617a4d0\r\n#       - subnet-0349f1f0866a0b9df\r\n#   iamRoleStatements:\r\n#     - Effect: Allow\r\n#       Action:\r\n#         - s3:PutObject\r\n#         - s3:GetObject\r\n#         - s3:HeadObject\r\n#         - s3:DeleteObject\r\n#       Resource:\r\n#         - arn:aws:s3:::montyvoice-backimages\r\n#         - arn:aws:s3:::montyvoice-backimages/*\r\n#     - Effect: Allow\r\n#       Action:\r\n#         - logs:CreateLogGroup\r\n#         - logs:CreateLogStream\r\n#         - logs:PutLogEvents\r\n#       Resource: arn:aws:logs:*:*:*\r\n#     - Effect: Allow\r\n#       Action:\r\n#         - sns:Publish\r\n#       Resource: arn:aws:sns:*:*:*\r\n#   - Effect: Allow\r\n#     Action:\r\n#       - ec2:CreateNetworkInterface\r\n#       - ec2:DescribeNetworkInterfaces\r\n#       - ec2:DeleteNetworkInterface\r\n#     Resource: \"*\"\r\n\r\n# functions:\r\n#   AuthService:\r\n#     handler: Auth/main.handler\r\n#     events:\r\n#       - http:\r\n#           path: /login\r\n#           method: POST\r\n#           cors: true\r\n#       - http:\r\n#           path: /signup\r\n#           method: POST\r\n#           cors: true\r\n#     timeout: 15\r\n#     memorySize: 128\r\n\r\n#   UserService:\r\n#     handler: User/main.handler\r\n#     events:\r\n#       - http:\r\n#           path: /users/getuserbyid/{user_id}\r\n#           method: get\r\n#           cors: true\r\n#       - http:\r\n#           path: /users/updateuser/{user_id}\r\n#           method: put\r\n#           cors: true\r\n#       - http:\r\n#           path: /users/getall/usernames\r\n#           method: get\r\n#           cors: true\r\n#       - http:\r\n#           path: /users/{user_id}/recent-activity\r\n#           method: get\r\n#           cors: true\r\n\r\n#     timeout: 15\r\n#     memorySize: 128\r\n\r\n#   PostsService:\r\n#     handler: Posts/main.handler\r\n#     events:\r\n#       - http:\r\n#           path: /posts/create\r\n#           method: POST\r\n#           cors: true\r\n#       - http:\r\n#           path: /posts/update/{post_id}\r\n#           method: PUT\r\n#           cors: true\r\n#       - http:\r\n#           path: /posts/delete/{post_id}\r\n#           method: DELETE\r\n#           cors: true\r\n#       - http:\r\n#           path: /posts/cheers/{user_id}\r\n#           method: GET\r\n#           cors: true\r\n#       - http:\r\n#           path: /posts/feedback/{user_id}\r\n#           method: GET\r\n#           cors: true\r\n#       - http:\r\n#           path: /posts/suggestion/{user_id}\r\n#           method: GET\r\n#           cors: true\r\n#     timeout: 15\r\n#     memorySize: 128\r\n\r\n#   RepliesService:\r\n#     handler: Replies/main.handler\r\n#     events:\r\n#       - http:\r\n#           path: /replies/create\r\n#           method: post\r\n#           cors: true\r\n#       - http:\r\n#           path: /replies/getreply/{post_id}\r\n#           method: get\r\n#           cors: true\r\n#       - http:\r\n#           path: /replies/delrep/{reply_id}\r\n#           method: delete\r\n#           cors: true\r\n#     timeout: 15\r\n#     memorySize: 128\r\n\r\n#   LikesService:\r\n#     handler: Like/main.handler\r\n#     events:\r\n#       - http:\r\n#           path: /like/{post_id}\r\n#           method: post\r\n#           cors: true\r\n#       - http:\r\n#           path: /unlike/{post_id}\r\n#           method: post\r\n#           cors: true\r\n#       - http:\r\n#           path: /like_state/{post_id}/{user_id}\r\n#           method: get\r\n#           cors: true\r\n#     timeout: 15\r\n#     memorySize: 128\r\n\r\n# custom:\r\n#   pythonRequirements:\r\n#     requirementsFile: requirements.txt\r\n#     concurrency: 1\r\n#     pipCmdExtraArgs:\r\n#       - \"--no-cache-dir\"\r\n#       - \"--disable-pip-version-check\"\r\n#   apigwBinary:\r\n#     types:\r\n#       - \"multipart/form-data\"\r\n\r\n# plugins:\r\n#   - serverless-python-requirements\r\n#   - serverless-apigw-binary\r\n\r\n# package:\r\n#   patterns:\r\n#     - \"Auth/**\"\r\n#     - \"User/**\"\r\n#     - \"Posts/**\"\r\n#     - \"Replies/**\"\r\n#     - \"Like/**\"\r\n#     - \"requirements.txt\"\r\n#   exclude:\r\n#     - node_modules/**\r\n#     - venv/**\r\n\r\norg: montycloud\r\napp: montovoicee\r\nservice: montyyvoicee\r\n\r\nprovider:\r\n  name: aws\r\n  runtime: python3.12\r\n  timeout: 30\r\n  memorySize: 128\r\n  # vpc:\r\n  #   securityGroupIds:\r\n  #     - sg-0cc877fb568624f4c # Replace with your Security Group ID\r\n  #   subnetIds:\r\n  #     - subnet-01e4a9a44d617a4d0\r\n  #     - subnet-0349f1f0866a0b9df # Add more subnet IDs as needed\r\n  iamRoleStatements:\r\n    - Effect: Allow\r\n      Action:\r\n        - s3:PutObject\r\n        - s3:GetObject\r\n        - s3:HeadObject\r\n        - s3:DeleteObject\r\n      Resource:\r\n        - arn:aws:s3:::montyvoice-backimages\r\n        - arn:aws:s3:::montyvoice-backimages/*\r\n    - Effect: Allow\r\n      Action:\r\n        - logs:CreateLogGroup\r\n        - logs:CreateLogStream\r\n        - logs:PutLogEvents\r\n      Resource: arn:aws:logs:*:*:*\r\n    - Effect: Allow\r\n      Action:\r\n        - sns:Publish\r\n      Resource: arn:aws:sns:*:*:*\r\n    # - Effect: Allow\r\n    #   Action:\r\n    #     - ec2:CreateNetworkInterface\r\n    #     - ec2:DescribeNetworkInterfaces\r\n    #     - ec2:DeleteNetworkInterface\r\n    #   Resource: \"*\"\r\n\r\nfunctions:\r\n  AuthService:\r\n    handler: Auth/main.handler\r\n    events:\r\n      - http:\r\n          path: /login\r\n          method: POST\r\n          cors: true\r\n      - http:\r\n          path: /signup\r\n          method: POST\r\n          cors: true\r\n    timeout: 60\r\n    memorySize: 512\r\n\r\n  UserService:\r\n    handler: User/main.handler\r\n    events:\r\n      - http:\r\n          path: /users/getuserbyid/{user_id}\r\n          method: get\r\n          cors: true\r\n      - http:\r\n          path: /users/updateuser/{user_id}\r\n          method: put\r\n          cors: true\r\n      - http:\r\n          path: /users/getall/usernames\r\n          method: get\r\n          cors: true\r\n      - http:\r\n          path: /users/{user_id}/recent-activity\r\n          method: get\r\n          cors: true\r\n    timeout: 60\r\n    memorySize: 512\r\n\r\n  PostsService:\r\n    handler: Posts/main.handler\r\n    events:\r\n      - http:\r\n          path: /posts/create\r\n          method: POST\r\n          cors: true\r\n      - http:\r\n          path: /posts/update/{post_id}\r\n          method: PUT\r\n          cors: true\r\n      - http:\r\n          path: /posts/delete/{post_id}\r\n          method: DELETE\r\n          cors: true\r\n      - http:\r\n          path: /posts/cheers/{user_id}\r\n          method: GET\r\n          cors: true\r\n      - http:\r\n          path: /posts/feedback/{user_id}\r\n          method: GET\r\n          cors: true\r\n      - http:\r\n          path: /posts/suggestion/{user_id}\r\n          method: GET\r\n          cors: true\r\n    timeout: 60\r\n    memorySize: 512\r\n\r\n  RepliesService:\r\n    handler: Replies/main.handler\r\n    events:\r\n      - http:\r\n          path: /replies/create\r\n          method: post\r\n          cors: true\r\n      - http:\r\n          path: /replies/getreply/{post_id}\r\n          method: get\r\n          cors: true\r\n      - http:\r\n          path: /replies/delrep/{reply_id}\r\n          method: delete\r\n          cors: true\r\n    timeout: 60\r\n    memorySize: 512\r\n\r\n  LikesService:\r\n    handler: Like/main.handler\r\n    events:\r\n      - http:\r\n          path: /like/{post_id}\r\n          method: post\r\n          cors: true\r\n      - http:\r\n          path: /unlike/{post_id}\r\n          method: post\r\n          cors: true\r\n      - http:\r\n          path: /like_state/{post_id}/{user_id}\r\n          method: get\r\n          cors: true\r\n    timeout: 60\r\n    memorySize: 512\r\n\r\ncustom:\r\n  pythonRequirements:\r\n    requirementsFile: requirements.txt\r\n    concurrency: 1\r\n    pipCmdExtraArgs:\r\n      - \"--no-cache-dir\"\r\n      - \"--disable-pip-version-check\"\r\n  apigwBinary:\r\n    types:\r\n      - \"multipart/form-data\"\r\n\r\nplugins:\r\n  - serverless-python-requirements\r\n  - serverless-apigw-binary\r\n\r\npackage:\r\n  patterns:\r\n    - \"Auth/**\"\r\n    - \"User/**\"\r\n    - \"Posts/**\"\r\n    - \"Replies/**\"\r\n    - \"Like/**\"\r\n    - \"requirements.txt\"\r\n  exclude:\r\n    - node_modules/**\r\n    - venv/**\r\n",
    "command": [
      "deploy"
    ],
    "options": {},
    "error": null,
    "params": {},
    "machineId": "8d30887215e8044335bfd3529ccf59d0",
    "accessKeyV2": "<REDACTED>",
    "accessKeyV1": "<REDACTED>",
    "orgId": "8b09d8e0-2ded-4107-b63a-c0aba9e5f41a",
    "orgName": "montycloud",
    "userId": "w7Z4RjRBqDpBDFMRBM",
    "dashboard": {
      "isEnabledForService": true,
      "requiredAuthentication": false,
      "orgFeaturesInUse": {
        "providers": false,
        "monitoring": false
      },
      "orgObservabilityIntegrations": null,
      "serviceAppId": "LhmZ99bch0YxbV4pyL",
      "serviceProvider": null,
      "instanceParameters": null
    },
    "userName": "montycloud",
    "subscription": null,
    "userEmail": "fazalfathimali15@gmail.com",
    "serviceProviderAwsCredentials": "<REDACTED>",
    "serviceProviderAwsAccountId": "329599639242",
    "projectType": "framework",
    "versionSf": "4.2.4",
    "serviceProviderAwsCfStackName": "montyyvoicee-dev",
    "integrations": {},
    "serviceProviderAwsCfStackId": "arn:aws:cloudformation:us-east-1:329599639242:stack/montyyvoicee-dev/d523e3c0-65c0-11ef-a8ab-0e9a153f17a7",
    "serviceProviderAwsCfStackCreated": "2024-08-29T04:40:35.636Z",
    "serviceProviderAwsCfStackUpdated": "2024-09-01T17:00:36.272Z",
    "serviceProviderAwsCfStackStatus": "UPDATE_COMPLETE",
    "serviceProviderAwsCfStackOutputs": [
      {
        "OutputKey": "PostsServiceLambdaFunctionQualifiedArn",
        "OutputValue": "arn:aws:lambda:us-east-1:329599639242:function:montyyvoicee-dev-PostsService:15",
        "Description": "Current Lambda function version",
        "ExportName": "sls-montyyvoicee-dev-PostsServiceLambdaFunctionQualifiedArn"
      },
      {
        "OutputKey": "LikesServiceLambdaFunctionQualifiedArn",
        "OutputValue": "arn:aws:lambda:us-east-1:329599639242:function:montyyvoicee-dev-LikesService:15",
        "Description": "Current Lambda function version",
        "ExportName": "sls-montyyvoicee-dev-LikesServiceLambdaFunctionQualifiedArn"
      },
      {
        "OutputKey": "AuthServiceLambdaFunctionQualifiedArn",
        "OutputValue": "arn:aws:lambda:us-east-1:329599639242:function:montyyvoicee-dev-AuthService:15",
        "Description": "Current Lambda function version",
        "ExportName": "sls-montyyvoicee-dev-AuthServiceLambdaFunctionQualifiedArn"
      },
      {
        "OutputKey": "RepliesServiceLambdaFunctionQualifiedArn",
        "OutputValue": "arn:aws:lambda:us-east-1:329599639242:function:montyyvoicee-dev-RepliesService:15",
        "Description": "Current Lambda function version",
        "ExportName": "sls-montyyvoicee-dev-RepliesServiceLambdaFunctionQualifiedArn"
      },
      {
        "OutputKey": "UserServiceLambdaFunctionQualifiedArn",
        "OutputValue": "arn:aws:lambda:us-east-1:329599639242:function:montyyvoicee-dev-UserService:15",
        "Description": "Current Lambda function version",
        "ExportName": "sls-montyyvoicee-dev-UserServiceLambdaFunctionQualifiedArn"
      },
      {
        "OutputKey": "ServiceEndpoint",
        "OutputValue": "https://tgd5mke0kj.execute-api.us-east-1.amazonaws.com/dev",
        "Description": "URL of the service endpoint",
        "ExportName": "sls-montyyvoicee-dev-ServiceEndpoint"
      },
      {
        "OutputKey": "ServerlessDeploymentBucketName",
        "OutputValue": "montyyvoicee-dev-serverlessdeploymentbucket-uvp8tnuf4fun",
        "ExportName": "sls-montyyvoicee-dev-ServerlessDeploymentBucketName"
      }
    ]
  }
}